library(deSolve)
library(RColorBrewer)
library(reshape2)
library(cdcfluview)
library(tidyverse)
library(ggplot2)
library(cowplot)
library(sjstats)
library(lubridate)
library(imputeTS)
library(zoo)
library(lhs)
library(plotrix)
"%notin%" = Negate('%in%')
#This part is similar to the first part of the model calibration code
## reading in and preparing data
yinit <- readRDS('Data/yinit.rds') %>%
mutate(Mn=0,N=0,Vs1=0,Vs2=0) #add intervention compartments
rm(list=ls())
library(deSolve)
library(RColorBrewer)
library(reshape2)
library(cdcfluview)
library(tidyverse)
library(ggplot2)
library(cowplot)
library(sjstats)
library(lubridate)
library(imputeTS)
library(zoo)
library(lhs)
library(plotrix)
"%notin%" = Negate('%in%')
yinit <- readRDS('Data/yinit.rds') %>%
mutate(Mn=0,N=0,Vs1=0,Vs2=0) #add intervention compartments
birth_new = birth[2284:2335,]
#extend dates into 2024-25 season, copy birthrates from last year of data
birth = as.matrix(rbind(birth,birth_new))
#vector of dates from burn-in to end of 2024-25 season
dates = data.frame(date=seq(from=as.Date("1980-01-05"), to=as.Date("2025-10-01"), by="weeks"))
contact <- readRDS('Data/contact_POLYMOD.rds')
N_ages <- nrow(yinit)
agenames <- c("<2m","2-3m","4-5m","6-7m","8-9m","10-11m","1Y","2-4Y","5-9Y","10-19Y","20-39Y","40-64Y","65Y+")
al <- N_ages
rownames(yinit) <- agenames
yinit.vector <- as.vector(yinit)
name.array <- array(NA, dim=dim(yinit))
for(i in 1:dim(name.array)[1]){
for(j in 1:dim(name.array)[2]){
name.array[i,j] <- paste(dimnames(yinit)[[1]][i],dimnames(yinit)[[2]][j]  )
}
}
name.vector <- as.vector(name.array)
names(yinit.vector) <- name.vector
#ageing
WidthAgeClassMonth = c(rep(2,times=6), 12,12*3,  60, 120, 240, 300, 180)  #Aging rate=1/width age class (months)
#annual birth rates (converted to weeks in ODE code)
PerCapitaBirthsYear=birth
#time steps for ODE
tmax=2387
wa_times <- seq(1, tmax, by =1)
#upload parameters fit by MLE
fitLL = readRDS("parameters_21Sep2023.rds")
baseline.txn.rate=exp(fitLL$par[1])
b1=exp(fitLL$par[2])
phi=(2*pi*(exp(fitLL$par[3]))) / (1+exp(fitLL$par[3]))
DurationMatImmunityDays = exp(fitLL$par[4])
report_seniors <-  exp(fitLL$par[5])
report_infants <-  exp(fitLL$par[6])
I_ex <-  exp(fitLL$par[7])
RRHm <-  exp(fitLL$par[8])
## Read in transmission dynamic model
source("Interventions/intervention_models.R")
interventions = function(birth_dose, #timing and coverage of nirsevimab birth doses
cover_n, #timing and coverage of nirsevimab catch-up doses
waningN, #duration of nirsevimab protection (in days)
RRIn, #relative risk of infection while protected by nirsevimab (default = 1)
RRHn,#relative risk of hospitalization with protected bynirsevimab
cover_s, #timing and coverage of senior vaccination
waningS, #duration of protection from vaccines (in days) for seniors
RRIs, #relative risk of infection after vaccination in seniors (default = 1)
RRHs #relative risk of hospitalization after vaccination in seniors
){
#parameters for fitting the pandemic and rebound periods
#suppression of seeding
introductions = data.frame(intros=c(rep(I_ex,2100),rep(0,44),rep(NA,12),rep(I_ex,231))) %>%
mutate(intros = na_interpolation(intros, method="linear"))
introductions = introductions$intros
#suppression of beta (due to NPIs)
npi = data.frame(npis=c(rep(1,2100),rep(.75,13),rep(NA,35),rep(1,40),rep(.75,12),rep(1,187)))%>%
mutate(npis= na_interpolation(npis, method="linear"))
npi = npi$npis
parmset<-list(PerCapitaBirthsYear=PerCapitaBirthsYear,
WidthAgeClassMonth=WidthAgeClassMonth,
baseline.txn.rate = baseline.txn.rate,
phi=phi,
b1=b1,
DurationMatImmunityDays=DurationMatImmunityDays,
report_seniors=report_seniors,
report_infants=report_infants,
um=-0.0002227,
rho1=0.75,
rho2=0.51,
dur.days1=10,
dur.days2=7,
dur.days3=5,
yinit.matrix=yinit,
q=1,
c2=contact,
sigma1=.76,
sigma2=.6,
sigma3=.4,
birth_dose = birth_dose,
cover_n = cover_n,
waningN=waningN,
RRIn=RRIn,
RRHn=RRHn,
RRHm=RRHm,
cover_s = cover_s,
waningS=waningS,
RRIs = RRIs,
RRHs = RRHs,
npi=npi,
introductions = introductions,
time.step='week'
)
output <- ode(y=yinit.vector, t=wa_times,
method = "ode45",
func=intervention_models,
parms=c(parmset))
t0 <- 455 #just save results after burn-in period
al <- nrow(yinit)
output <- tail(output,t0)
St <- output[,-1]
I1 <- St[,grep('I1', colnames(St))]
I2 <- St[,grep('I2', colnames(St))]
I3 <- St[,grep('I3', colnames(St))]
I4 <- St[,grep('I4', colnames(St))]
S0 <- St[,grep('S0', colnames(St))]
S1 <- St[,grep('S1', colnames(St))]
S2 <- St[,grep('S2', colnames(St))]
S3 <- St[,grep('S3', colnames(St))]
M <- St[,grep('M', colnames(St))]
Mn <- St[,grep('Mn', colnames(St))]
N <- St[,grep('N', colnames(St))]
Vs1 <- St[,grep('Vs1', colnames(St))]
Vs2 <- St[,grep('Vs2', colnames(St))]
contact2 = npi[1933:2387]
intro2 = introductions[1933:2387]
lambda1=matrix(0,nrow=t0,ncol=al)#Force of infection
for (t in 1:t0){
beta <-  baseline.txn.rate/(parmset$dur.days1/7)/(sum(parmset$yinit.matrix)^(1-parmset$q))*parmset$c2*contact2[t]
lambda1[t,] <- as.vector((1+b1*cos(2*pi*(t-phi*52.1775)/52.1775))*((I1[t,]+parmset$rho1*I2[t,]+parmset$rho2*I3[t,]+parmset$rho2*I4[t,]+intro2[t])%*%beta)/sum(St[t,]))}
hosp = c(report_infants, report_infants*0.59, report_infants*0.33, report_infants*0.2,report_infants*0.15, report_infants*0.15, report_seniors,report_seniors,report_seniors*0.06,report_seniors*0.06,report_seniors*0.06,report_seniors*0.06,report_seniors)
H1=matrix(0,nrow=t0,ncol=al)#Number of hospitalizations by age
for (i in 1:al){
H1[,i]=RRHm*hosp[i]*M[,i]*lambda1[,i]+
#RRHn*RRHm*hosp[i]*RRIn*Mn[,i]*lambda1[,i]+ #note, this is adding nirsevimab impact on top of maternal immunity (might be too high?)
RRHn*hosp[i]*RRIn*Mn[,i]*lambda1[,i]+ #alternative approach is to add nirsevimab impact on it's own
#RRHn*RRHm*hosp[i]*RRIn*N[,i]*lambda1[,i]+
RRHn*hosp[i]*RRIn*N[,i]*lambda1[,i]+# see note above
hosp[i]*S0[,i]*lambda1[,i]+
hosp[i]*parmset$sigma1*S1[,i]*lambda1[,i]+
hosp[i]*parmset$sigma2*S2[,i]*lambda1[,i]+
hosp[i]*parmset$sigma3*S3[,i]*lambda1[,i]+
RRHs*hosp[i]*parmset$RRIs*parmset$sigma3*Vs1[,i]*lambda1[,i]+
RRHs*hosp[i]*parmset$RRIs*parmset$sigma3*Vs2[,i]*lambda1[,i]
}
H2=cbind(H1[,1],H1[,2],H1[,3],H1[,4],H1[,5],H1[,6],rowSums(H1[,7:8]),rowSums(H1[,9:12]),H1[,13])
all_ages = data.frame(hosp = rowSums(H2[352:455,]),
date = dates$date[2284:2387],
age="All")# total hospitalizations
infants = data.frame(hosp = rowSums(H2[352:455,1:6]),
date = dates$date[2284:2387],
age="Infants <1y")# intervention given to infants <8m but benefit is intended for all infants
seniors = data.frame(hosp = H2[352:455,9],
date = dates$date[2284:2387],
age="Seniors")# seniors
results = rbind(all_ages, infants, seniors) %>%
mutate(season = ifelse(date>='2024-10-01',"season24_25","season23_24"))
return(results)
}
interventions_PI = function(birth_dose, cover_n, waningN,RRIn, RRHn,
cover_s, waningS, RRIs, RRHs){
#parameters for fitting the pandemic and rebound periods
introductions = data.frame(intros=c(rep(I_ex,2100),rep(0,44),rep(NA,12),rep(I_ex,231))) %>%
mutate(intros = na_interpolation(intros, method="linear"))
introductions = introductions$intros
npi = data.frame(npis=c(rep(1,2100),rep(.75,13),rep(NA,35),rep(1,40),rep(.75,12),rep(1,187)))%>%
mutate(npis= na_interpolation(npis, method="linear"))
npi = npi$npis
parmset<-list(PerCapitaBirthsYear=PerCapitaBirthsYear,
WidthAgeClassMonth=WidthAgeClassMonth,
baseline.txn.rate = baseline.txn.rate,
phi=phi,
b1=b1,
DurationMatImmunityDays=DurationMatImmunityDays,
report_seniors=report_seniors,
report_infants=report_infants,
um=-0.0002227,
rho1=0.75,
rho2=0.51,
dur.days1=10,
dur.days2=7,
dur.days3=5,
yinit.matrix=yinit,
q=1,
c2=contact,
sigma1=.76,
sigma2=.6,
sigma3=.4,
birth_dose = birth_dose,
cover_n = cover_n,
waningN=waningN,
RRIn=RRIn,
RRHn=RRHn,
RRHm=RRHm,
cover_s = cover_s,
waningS=waningS,
RRIs = RRIs,
RRHs = RRHs,
npi=npi,
introductions = introductions,
time.step='week'
)
output <- ode(y=yinit.vector, t=wa_times,
method = "ode45",
func=intervention_models,
parms=c(parmset))
t0 <- 455
al <- nrow(yinit)
output <- tail(output,t0)
St <- output[,-1]
I1 <- St[,grep('I1', colnames(St))]
I2 <- St[,grep('I2', colnames(St))]
I3 <- St[,grep('I3', colnames(St))]
I4 <- St[,grep('I4', colnames(St))]
S0 <- St[,grep('S0', colnames(St))]
S1 <- St[,grep('S1', colnames(St))]
S2 <- St[,grep('S2', colnames(St))]
S3 <- St[,grep('S3', colnames(St))]
M <- St[,grep('M', colnames(St))]
Mn <- St[,grep('Mn', colnames(St))]
N <- St[,grep('N', colnames(St))]
Vs1 <- St[,grep('Vs1', colnames(St))]
Vs2 <- St[,grep('Vs2', colnames(St))]
contact2 = npi[1933:2387]
intro2 = introductions[1933:2387]
lambda1=matrix(0,nrow=t0,ncol=al)#Force of infection
for (t in 1:t0){
beta <-  baseline.txn.rate/(parmset$dur.days1/7)/(sum(parmset$yinit.matrix)^(1-parmset$q))*parmset$c2*contact2[t]
lambda1[t,] <- as.vector((1+b1*cos(2*pi*(t-phi*52.1775)/52.1775))*((I1[t,]+parmset$rho1*I2[t,]+parmset$rho2*I3[t,]+parmset$rho2*I4[t,]+intro2[t])%*%beta)/sum(St[t,]))}
hosp = c(report_infants, report_infants*0.59, report_infants*0.33, report_infants*0.2,report_infants*0.15, report_infants*0.15, report_seniors,report_seniors,report_seniors*0.06,report_seniors*0.06,report_seniors*0.06,report_seniors*0.06,report_seniors)
H1=matrix(0,nrow=t0,ncol=al)#Number of hospitalizations by age
for (i in 1:al){
H1[,i]=RRHm*hosp[i]*M[,i]*lambda1[,i]+
RRHn*hosp[i]*RRIn*Mn[,i]*lambda1[,i]+
RRHn*hosp[i]*RRIn*N[,i]*lambda1[,i]+
hosp[i]*S0[,i]*lambda1[,i]+
hosp[i]*parmset$sigma1*S1[,i]*lambda1[,i]+
hosp[i]*parmset$sigma2*S2[,i]*lambda1[,i]+
hosp[i]*parmset$sigma3*S3[,i]*lambda1[,i]+
RRHs*hosp[i]*parmset$RRIs*parmset$sigma3*Vs1[,i]*lambda1[,i]+
RRHs*hosp[i]*parmset$RRIs*parmset$sigma3*Vs2[,i]*lambda1[,i]
}
H2=cbind(H1[,1],H1[,2],H1[,3],H1[,4],H1[,5],H1[,6],rowSums(H1[,7:8]),rowSums(H1[,9:12]),H1[,13])
all_ages = data.frame(hosp = rowSums(H2[352:455,]),
date = dates$date[2284:2387],
age="All")# total hospitalizations
infants = data.frame(hosp = rowSums(H2[352:455,1:6]),
date = dates$date[2284:2387],
age="Infants <1y")# intervention given to infants <8m but benefit is intended for all infants
seniors = data.frame(hosp = H2[352:455,9],
date = dates$date[2284:2387],
age="Seniors")# seniors
projection_intervals = rbind(all_ages, infants, seniors) %>%
mutate(season = ifelse(date>='2024-10-01',"season24_25","season23_24"),
lhs = "point estimate")
#create easy confidence intervals (+/- 5%)
# does not include variables that scale infections to hospitalizations
beta_lower = baseline.txn.rate*.95
beta_upper = baseline.txn.rate*1.05
b1_lower = b1*.95
b1_upper = b1*1.05
phi_lower = phi*.95
phi_upper = phi*1.05
duration_lower = 28
duration_upper = 112
I_ex_lower = I_ex*.95
I_ex_upper = I_ex*1.05
#set-up LHS
h <- 1000
set.seed(123)
lhs<-maximinLHS(h,5)
new_parms <- cbind(
baseline.txn.rate = lhs[,1]*(beta_upper-beta_lower)+beta_lower,
b1 = lhs[,2]*(b1_upper-b1_lower)+b1_lower,
phi = lhs[,3]*(phi_upper-phi_lower)+phi_lower,
DurationMatImmunityDays = lhs[,4]*(duration_upper-duration_lower)+duration_lower,
I_ex = lhs[,5]*(I_ex_upper-I_ex_lower)+I_ex_lower)
#parameters for fitting the pandemic and rebound periods
for(l in 1:1000){
introductions = data.frame(intros=c(rep(new_parms[l,"I_ex"],2100),rep(0,44),rep(NA,12),rep(new_parms[l,"I_ex"],231))) %>%
mutate(intros = na_interpolation(intros, method="linear"))
introductions = introductions$intros
parmset<-list(PerCapitaBirthsYear=PerCapitaBirthsYear,
WidthAgeClassMonth=WidthAgeClassMonth,
baseline.txn.rate = new_parms[l,"baseline.txn.rate"],
phi=new_parms[l,"phi"],
b1=new_parms[l,"b1"],
DurationMatImmunityDays=new_parms[l,"DurationMatImmunityDays"],
report_seniors=report_seniors,
report_infants=report_infants,
um=-0.0002227,
rho1=0.75,
rho2=0.51,
dur.days1=10,
dur.days2=7,
dur.days3=5,
yinit.matrix=yinit,
q=1,
c2=contact,
sigma1=.76,
sigma2=.6,
sigma3=.4,
birth_dose = birth_dose,
cover_n = cover_n,
waningN=waningN,
RRIn=RRIn,
RRHn=RRHn,
RRHm=RRHm,
cover_s = cover_s,
waningS=waningS,
RRIs = RRIs,
RRHs = RRHs,
npi=npi,
introductions = introductions,
time.step='week'
)
output <- ode(y=yinit.vector, t=wa_times,
method = "ode45",
func=intervention_models,
parms=c(parmset))
t0 <- 455
al <- nrow(yinit)
output <- tail(output,t0)
St <- output[,-1]
I1 <- St[,grep('I1', colnames(St))]
I2 <- St[,grep('I2', colnames(St))]
I3 <- St[,grep('I3', colnames(St))]
I4 <- St[,grep('I4', colnames(St))]
S0 <- St[,grep('S0', colnames(St))]
S1 <- St[,grep('S1', colnames(St))]
S2 <- St[,grep('S2', colnames(St))]
S3 <- St[,grep('S3', colnames(St))]
M <- St[,grep('M', colnames(St))]
Mn <- St[,grep('Mn', colnames(St))]
N <- St[,grep('N', colnames(St))]
Vs1 <- St[,grep('Vs1', colnames(St))]
Vs2 <- St[,grep('Vs2', colnames(St))]
contact2 = npi[1933:2387]
intro2 = introductions[1933:2387]
lambda1=matrix(0,nrow=t0,ncol=al)#Force of infection
for (t in 1:t0){
beta <-  baseline.txn.rate/(parmset$dur.days1/7)/(sum(parmset$yinit.matrix)^(1-parmset$q))*parmset$c2*contact2[t]
lambda1[t,] <- as.vector((1+b1*cos(2*pi*(t-phi*52.1775)/52.1775))*((I1[t,]+parmset$rho1*I2[t,]+parmset$rho2*I3[t,]+parmset$rho2*I4[t,]+intro2[t])%*%beta)/sum(St[t,]))}
hosp = c(report_infants, report_infants*0.59, report_infants*0.33, report_infants*0.2,report_infants*0.15, report_infants*0.15, report_seniors,report_seniors,report_seniors*0.06,report_seniors*0.06,report_seniors*0.06,report_seniors*0.06,report_seniors)
H1=matrix(0,nrow=t0,ncol=al)#Number of hospitalizations by age
for (i in 1:al){
H1[,i]=RRHm*hosp[i]*M[,i]*lambda1[,i]+
RRHn*hosp[i]*RRIn*Mn[,i]*lambda1[,i]+
RRHn*hosp[i]*RRIn*N[,i]*lambda1[,i]+
hosp[i]*S0[,i]*lambda1[,i]+
hosp[i]*parmset$sigma1*S1[,i]*lambda1[,i]+
hosp[i]*parmset$sigma2*S2[,i]*lambda1[,i]+
hosp[i]*parmset$sigma3*S3[,i]*lambda1[,i]+
RRHs*hosp[i]*parmset$RRIs*parmset$sigma3*Vs1[,i]*lambda1[,i]+
RRHs*hosp[i]*parmset$RRIs*parmset$sigma3*Vs2[,i]*lambda1[,i]
}
H2=cbind(H1[,1],H1[,2],H1[,3],H1[,4],H1[,5],H1[,6],rowSums(H1[,7:8]),rowSums(H1[,9:12]),H1[,13])
all_ages = data.frame(hosp = rowSums(H2[352:455,]),
date = dates$date[2284:2387],
age="All")# total hospitalizations
infants = data.frame(hosp = rowSums(H2[352:455,1:6]),
date = dates$date[2284:2387],
age="Infants <1y")# intervention given to infants <8m but benefit is intended for all infants
seniors = data.frame(hosp = H2[352:455,9],
date = dates$date[2284:2387],
age="Seniors")# seniors
estimates = rbind(all_ages, infants, seniors) %>%
mutate(season = ifelse(date>='2024-10-01',"season24_25","season23_24"),lhs = l)
projection_intervals = rbind(projection_intervals, estimates)
}
return(projection_intervals)
}
# Infant interventions ----------------------------------------------------
#timing of vaccination for catch-up vaccines (based on flu in 6mo-4yrs)
#assuming catch-up doses end after December (#week 22)
#64% cumulative coverage by end of Dec - scale for RSV coverage scenarios
child_vaccination = read_csv("https://raw.githubusercontent.com/midas-network/flu-scenario-modeling-hub_resources/main/Rd2_datasets/Age_Specific_Coverage_Flu_RD2_2022_23_Sc_A_B_C_D.csv") %>%
filter(Geography=="Washington", Age=="6 Months - 4 Years") %>%
select("date"=Week_Ending_Sat, "flu_coverage"=flu.coverage.rd2.sc_A_B_C_D) %>%
mutate(flu_coverage = ifelse(date=="2022-08-13",0,flu_coverage),
flu_cov_cum = flu_coverage/100,
flu_cov_week = flu_cov_cum - lag(flu_cov_cum,1),
week_lag = lag(flu_cov_week,6),
cum_lag = lag(flu_coverage,6)) %>%
replace(is.na(.),0)
#(25%/50%)
child_pess = c(rep(0,2274),child_vaccination$week_lag[1:22]*.5,rep(0,30),child_vaccination$flu_cov_week[1:30]*.78,rep(0,29),child_vaccination$flu_cov_week[1:9]*.78)
birth_pess = c(rep(0,2283),rep(.25,26),rep(0,26),rep(.5,26),rep(0,26))
#(50%/75%)
child_real = c(rep(0,2274),child_vaccination$week_lag[1:22]*.9,rep(0,30),child_vaccination$flu_cov_week[1:30]*1.2,rep(0,29),child_vaccination$flu_cov_week[1:9]*1.2)
birth_real = c(rep(0,2283),rep(.5,26),rep(0,26),rep(.75,26),rep(0,26))
#(75%/90%)
child_opt = c(rep(0,2274),child_vaccination$week_lag[1:22]*1.4,rep(0,30),child_vaccination$flu_cov_week[1:22]*1.3,rep(0,30),child_vaccination$flu_cov_week[1:9]*1.3)
birth_opt = c(rep(0,2283),rep(.75,26),rep(0,26),rep(.9,26),rep(0,26))
#pessimistic/ realistic vaccine effectiveness (60%)
VE_pessimistic_infant = 0.4
#optimistic vaccine effectiveness (80%)
VE_optimistic_infant = 0.2
#vectorize scenarios
infant_coverage = list("pessimistic"=child_pess, "realistic"=child_real, "optimistic"=child_opt)
birth_coverage = list("pessimistic"=birth_pess, "realistic"=birth_real, "optimistic"=birth_opt)
infant_ve = c("pessimistic"=VE_pessimistic_infant, "optimistic"=VE_optimistic_infant)
infant_interventions = data.frame(hosp=NA, date=NA,age=NA,season=NA, lhs=NA,coverage=NA, VE=NA)
for(c in 1:3){
for(v in 1:2){
intervention_results = interventions_PI(birth_dose=birth_coverage[[c]],
cover_n=infant_coverage[[c]],
waningN=36500,
RRIn=1,
RRHn=infant_ve[v],
cover_s=c(rep(0,2387)),
waningS=36500,
RRIs=1,
RRHs=1) %>%
filter(age=="Infants <1y") %>%
mutate(coverage = names(infant_coverage[c]),
VE = names(infant_ve[v]))
infant_interventions = rbind(infant_interventions, intervention_results)
}}
rm(list=ls())
library(deSolve)
library(RColorBrewer)
library(reshape2)
library(cdcfluview)
library(tidyverse)
library(ggplot2)
library(cowplot)
library(sjstats)
library(lubridate)
library(imputeTS)
library(zoo)
library(lhs)
library(plotrix)
"%notin%" = Negate('%in%')
#This part is similar to the first part of the model calibration code
## reading in and preparing data
yinit <- readRDS('Data/yinit.rds') %>%
mutate(Mn=0,N=0,Vs1=0,Vs2=0) #add intervention compartments
rm(list=ls())
library(deSolve)
library(RColorBrewer)
library(reshape2)
library(cdcfluview)
library(tidyverse)
library(ggplot2)
library(cowplot)
library(sjstats)
library(lubridate)
library(imputeTS)
library(zoo)
library(lhs)
library(plotrix)
"%notin%" = Negate('%in%')
#This part is similar to the first part of the model calibration code
## reading in and preparing data
yinit <- readRDS('Data/yinit.rds') %>%
mutate(Mn=0,N=0,Vs1=0,Vs2=0) #add intervention compartments
library(usethis)
#create a new token - this will take your to github.com to create
create_github_token()
library(usethis)
#create a new token - this will take your to github.com to create
create_github_token()
#this shows you your current credentials and asks if you would like to reset
ExcesEgitcreds::gitcreds_set()
#this shows your current credentials
gitcreds::gitcreds_get()
#"introduce yourself to git
use_git_config(user.name ="Chelsea - FIC", user.email ="c.hansen.mph@gmail.com")
#clone a repo from github
usethis::create_from_github(
"https://github.com/chansen-88/testrepo.git",
destdir = "C:/Users/hansencl/Documents"
)
#this shows you your current credentials and asks if you would like to reset
ExcesEgitcreds::gitcreds_set()
#this shows your current credentials
gitcreds::gitcreds_get()
#this shows you your current credentials and asks if you would like to reset
ExcesEgitcreds::gitcreds_set()
library(ggpubr)
#this shows you your current credentials and asks if you would like to reset
ExcesEgitcreds::gitcreds_set()
#this shows you your current credentials and asks if you would like to reset
gitcreds::gitcreds_set()
#this shows your current credentials
gitcreds::gitcreds_get()
#"introduce yourself to git
use_git_config(user.name ="Chelsea - FIC", user.email ="c.hansen.mph@gmail.com")
